// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clientprospet.Data;

#nullable disable

namespace clientprospet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240622194658_initial_create")]
    partial class initial_create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("clientprospet.Models.Adresse", b =>
                {
                    b.Property<int>("Pkad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkad"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Gouvernorat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numéro")
                        .HasColumnType("int");

                    b.Property<string>("Pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pkad");

                    b.HasIndex("ClientId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("clientprospet.Models.ClientProspet", b =>
                {
                    b.Property<int>("Id_client")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_client"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Adresse_key")
                        .HasColumnType("int");

                    b.Property<string>("Adresse_mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutreNationalité")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutreSourceRevenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BénéficiaireEffectif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Civilite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeDR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodeSécurité")
                        .HasColumnType("int");

                    b.Property<string>("Code_gov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Code_postal")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtatCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fax")
                        .HasColumnType("int");

                    b.Property<int?>("GSM")
                        .HasColumnType("int");

                    b.Property<string>("Gouvernorat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Lattitude")
                        .HasColumnType("real");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Matricule_chefagence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalitéPrincipale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureDeActivité")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaysDeNaissance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RNE")
                        .HasColumnType("int");

                    b.Property<int?>("RevenuNetMensuel")
                        .HasColumnType("int");

                    b.Property<string>("Résident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatutProfessionnel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tel1")
                        .HasColumnType("int");

                    b.Property<int?>("Tel2")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_client");

                    b.ToTable("ClientProspets");
                });

            modelBuilder.Entity("clientprospet.models.CIN", b =>
                {
                    b.Property<int>("idCIN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCIN"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DateDeDélivrance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emploi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuDeNaissance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomEtPrénomDeMére")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NuméroCIN")
                        .HasColumnType("int");

                    b.Property<string>("Prénom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCIN");

                    b.HasIndex("ClientId");

                    b.ToTable("CIN");
                });

            modelBuilder.Entity("clientprospet.models.Documents", b =>
                {
                    b.Property<int>("id_doc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_doc"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Contrat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Convention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numéro")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_doc");

                    b.HasIndex("ClientId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("clientprospet.models.FATCA", b =>
                {
                    b.Property<int>("idFATCA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idFATCA"));

                    b.Property<string>("AdresseUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("GreenCard")
                        .HasColumnType("int");

                    b.Property<string>("PDPUSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TelUS")
                        .HasColumnType("int");

                    b.Property<string>("VPVCEtatsUnis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idFATCA");

                    b.HasIndex("ClientId");

                    b.ToTable("FATCA");
                });

            modelBuilder.Entity("clientprospet.models.MailClient", b =>
                {
                    b.Property<int>("id_mobileclient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_mobileclient"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Default")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("id_mobileclient");

                    b.HasIndex("ClientId");

                    b.ToTable("MailClient");
                });

            modelBuilder.Entity("clientprospet.models.MobileClient", b =>
                {
                    b.Property<int>("id_MobileClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_MobileClient"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Default")
                        .HasColumnType("int");

                    b.Property<int>("Numérotéléphone")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("id_MobileClient");

                    b.HasIndex("ClientId");

                    b.ToTable("mobiles");
                });

            modelBuilder.Entity("clientprospet.models.choixagence", b =>
                {
                    b.Property<int>("CodeAgence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeAgence"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Adresse_key")
                        .HasColumnType("int");

                    b.Property<string>("Adresse_mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CodeDR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code_gov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code_postal")
                        .HasColumnType("int");

                    b.Property<string>("DR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fax")
                        .HasColumnType("int");

                    b.Property<int>("GSM")
                        .HasColumnType("int");

                    b.Property<string>("Gouvernorat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lattitude")
                        .HasColumnType("real");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Matricule_chefagence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tel1")
                        .HasColumnType("int");

                    b.Property<int>("Tel2")
                        .HasColumnType("int");

                    b.HasKey("CodeAgence");

                    b.HasIndex("ClientId");

                    b.ToTable("ChoixAgences");
                });

            modelBuilder.Entity("clientprospet.Models.Adresse", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("Adresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.CIN", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("CIN")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.Documents", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.FATCA", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("FATCA")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.MailClient", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("MailClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.MobileClient", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("MobileClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.models.choixagence", b =>
                {
                    b.HasOne("clientprospet.Models.ClientProspet", "ClientProspet")
                        .WithMany("Choixagence")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProspet");
                });

            modelBuilder.Entity("clientprospet.Models.ClientProspet", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CIN");

                    b.Navigation("Choixagence");

                    b.Navigation("Documents");

                    b.Navigation("FATCA");

                    b.Navigation("MailClient");

                    b.Navigation("MobileClient");
                });
#pragma warning restore 612, 618
        }
    }
}
